package com.chess.engine.pieces;

import java.util.ArrayList;
import java.util.List;

import com.chess.engine.PieceColor;
import com.chess.engine.board.Board;
import com.chess.engine.board.Position;
import com.chess.engine.board.Move;
import com.chess.engine.board.Tile;
import com.google.common.collect.ImmutableList;

public class Knight extends Piece {

    private final static BoardPosition UPPER_MOVES_ONE = new BoardPosition(-1, 3);
    private final static BoardPosition UPPER_MOVES_TWO = new BoardPosition(1, 3);

    private final static BoardPosition LOWER_MOVES_ONE = new BoardPosition(-1, -3);
    private final static BoardPosition LOWER_MOVES_TWO = new BoardPosition(1, -3);

    private final static BoardPosition LEFT_MOVES_ONE = new BoardPosition(-3, 1);
    private final static BoardPosition LEFT_MOVES_TWO = new BoardPosition(-3, -1);

    private final static BoardPosition RIGHT_MOVES_ONE = new BoardPosition(3, 1);
    private final static BoardPosition RIGHT_MOVES_TWO = new BoardPosition(3, -1);

    private final static BoardPosition[] ALLOWED_MOVES = {
        UPPER_MOVES_ONE,
        UPPER_MOVES_TWO,
        LOWER_MOVES_ONE,
        LOWER_MOVES_TWO,
        LEFT_MOVES_ONE,
        LEFT_MOVES_TWO,
        RIGHT_MOVES_ONE,
        RIGHT_MOVES_TWO,
    };

    public Knight(BoardPosition piecePosition, PieceColor pieceColor) {
        super(piecePosition, pieceColor);
    }

    @Override
    public List<Move> calculateLegalMoves(Board board) {

        BoardPosition potentialMove = new BoardPosition();
        List<Move> legalMoves = new ArrayList<Move>();

        for (BoardPosition each : ALLOWED_MOVES) {
            //check X coordinate for each move is make
            potentialMove.setX( this.piecePosition.getX() + each.getX() );
            potentialMove.setY( this.piecePosition.getY() + each.getY() );

            if (isValidCoordinate(potentialMove)) {
                final Tile targetedTile = board.getTile(potentialMove);
                if ( !targetedTile.isOccupied() ) {
                    //Move is still not implemented here
                    legalMoves.add(new Move());
                } else {
                    //if the tile selected is Occupied
                    final Piece targetedPiece = targetedTile.getPiece();
                    //Check if the piece is enemy or friend
                    final PieceColor targetedPieceColor = targetedPiece.getPieceColor();
                    //Enemy detected
                    if (this.pieceColor != targetedPieceColor) {
                        //Different type of move here for attacking
                        legalMoves.add(new Move());
                    }
                }
            }
        }
        return ImmutableList.copyOf(legalMoves);
    }

}
